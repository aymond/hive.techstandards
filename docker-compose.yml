version: '3.8'

services:
  # React client
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5080:80"
    depends_on:
      - server
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5081/api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
  # Node.js server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5081:5081"
    depends_on:
      - mongo
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/tech-standards
      - JWT_SECRET=your-jwt-secret
      - SESSION_SECRET=your-session-secret
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CALLBACK_URL=http://localhost:5080/api/auth/google/callback
      - CLIENT_URL=http://localhost:5080
      - PORT=5081
      - COOKIE_DOMAIN=localhost
    # Changed from volume to tmpfs for logs
    tmpfs:
      - /app/logs
    restart: unless-stopped
    stop_grace_period: 5s
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5081/api/health"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MongoDB
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    # Using tmpfs for data to avoid volume binding issues
    tmpfs:
      - /data/db
    networks:
      - app-network
    restart: unless-stopped
    stop_grace_period: 5s
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/tech-standards --quiet
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

networks:
  app-network:
    driver: bridge

# Removed volumes section 