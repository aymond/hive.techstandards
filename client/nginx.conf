server {
    listen 80;
    server_name localhost;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # Enable gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types
      application/javascript
      application/json
      text/css
      text/plain;

    # Main application
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
        
        # Add some caching headers
        add_header Cache-Control "public, max-age=3600";
        
        # Setup error handling
        error_page 404 =200 /index.html;
        error_page 500 502 503 504 /fallback.html;
    }

    # Static assets like images, fonts, etc.
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        root /usr/share/nginx/html;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }
    
    # JavaScript and CSS files
    location ~* \.(js|css)$ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
    }
    
    # Serve env.js with no cache
    location /env.js {
        root /usr/share/nginx/html;
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }

    # API requests
    location /api/ {
        # Regular API requests
        proxy_pass http://server:5081/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        proxy_set_header Referer $http_referer;
        
        # Important for cookies and authentication
        proxy_set_header Cookie $http_cookie;
        proxy_cookie_path / /;
        add_header Access-Control-Allow-Origin $http_origin;
        add_header Access-Control-Allow-Credentials "true";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
        
        # Proxy timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle API errors
        proxy_intercept_errors on;
        error_page 500 502 503 504 /api-error.html;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # Create a static API error page
    location = /api-error.html {
        root /usr/share/nginx/html;
        internal;
        default_type text/html;
        return 200 '<html><head><title>API Error</title><style>body{font-family:sans-serif;display:flex;align-items:center;justify-content:center;height:100vh;margin:0;background:#f5f5f5;}.message{max-width:500px;padding:30px;background:white;border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.1);text-align:center;}</style></head><body><div class="message"><h1>API Service Unavailable</h1><p>The API service is currently unavailable. This could be due to maintenance or an unexpected outage.</p><p>Please try again later or contact support if the issue persists.</p><button onclick="window.location.reload()" style="padding:10px 20px;background:#4a6cf7;color:white;border:none;border-radius:4px;cursor:pointer;margin-top:20px">Retry</button></div></body></html>';
    }
} 